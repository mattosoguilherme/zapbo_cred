const fs = require("fs");
const path = require("path");
const {
  DisconnectReason,
  useMultiFileAuthState,
  makeWASocket,
  Browsers,
} = require("@whiskeysockets/baileys");

const AUTH_FOLDER = "auth_info_baileys";

// Garante que a pasta de autentica√ß√£o exista
if (!fs.existsSync(path.resolve(AUTH_FOLDER))) {
  fs.mkdirSync(path.resolve(AUTH_FOLDER), { recursive: true });
  console.log("üìÇ Pasta de autentica√ß√£o criada:", path.resolve(AUTH_FOLDER));
}

// Vari√°veis globais
let sock = null;
let state = null;
let saveCreds = null;
let isConnected = false;
let connecting = false; // evita chamadas paralelas

// Fun√ß√£o principal de conex√£o ao WhatsApp
const connect = async () => {
  if (connecting || isConnected) return;
  connecting = true;

  try {
    console.log("üîê Carregando sess√£o de autentica√ß√£o de:", path.resolve(AUTH_FOLDER));
    const authState = await useMultiFileAuthState(AUTH_FOLDER);
    state = authState.state;
    saveCreds = authState.saveCreds;

    sock = makeWASocket({
      auth: state,
      printQRInTerminal: true,
      browser: Browsers.windows("Desktop"),
    });

    // Evento: recebimento de mensagens
    sock.ev.on("messages.upsert", async ({ messages }) => {
      for (const msg of messages) {
        if (msg.key.remoteJid === "status@broadcast") {
          console.log("üì¢ Ignorando mensagem de Status...");
          return;
        }

        // Tratar mensagens recebidas aqui
      }
    });

    // Evento: atualiza√ß√£o de conex√£o
    sock.ev.on("connection.update", async (update) => {
      const { connection, lastDisconnect } = update;

      if (connection === "close") {
        const errorCode = lastDisconnect?.error?.output?.statusCode;
        console.log(`‚ö†Ô∏è Conex√£o fechada. C√≥digo: ${errorCode}`);

        if (errorCode === DisconnectReason.loggedOut) {
          console.log("üö® Usu√°rio deslogado. Fazendo backup e limpando autentica√ß√£o...");

          const backupPath = `${AUTH_FOLDER}_backup_${Date.now()}`;
          try {
            fs.cpSync(path.resolve(AUTH_FOLDER), backupPath, { recursive: true });
            console.log(`üõü Backup da sess√£o salvo em: ${backupPath}`);
          } catch (e) {
            console.error("‚ùå Erro ao fazer backup:", e.message || e);
          }

          fs.rmSync(path.resolve(AUTH_FOLDER), { recursive: true, force: true });
          isConnected = false;
          connecting = false;
          setTimeout(connect, 3000);
          return;
        }

        console.log("üîÑ Tentando reconectar...");
        isConnected = false;
        connecting = false;
        setTimeout(connect, 5000);
      } else if (connection === "open") {
        console.log("‚úÖ Conex√£o estabelecida!");
        console.log("üì± N√∫mero logado:", sock.user.id.split(":")[0]);
        isConnected = true;
        connecting = false;
      }
    });

    // Evento: atualiza√ß√£o de credenciais
    sock.ev.on("creds.update", async () => {
      await saveCreds();
      console.log("üíæ Credenciais atualizadas.");
    });

  } catch (error) {
    console.error("‚ùå Erro ao conectar:", error.message || error);
    connecting = false;
  }
};

// Aguarda conex√£o ativa
const waitForConnection = async () => {
  let attempts = 0;

  while (!isConnected) {
    if (attempts >= 15) {
      throw new Error("‚è≥ Tempo limite atingido para conex√£o!");
    }

    console.log("‚è≥ Aguardando conex√£o...");
    await new Promise((resolve) => setTimeout(resolve, 2000));
    attempts++;
  }
};

// Envia mensagem para um n√∫mero espec√≠fico
const sendBailey = async (number, message) => {
  if (!sock) throw new Error("üö´ Socket n√£o inicializado.");
  await waitForConnection();

  try {
    const jid = `55${number}@s.whatsapp.net`;
    console.log(`üì§ Enviando mensagem para ${number}...`);

    await sock.sendMessage(jid, { text: message });

    console.log(`‚úÖ Mensagem enviada para ${number} √†s ${new Date().toLocaleTimeString()}`);
  } catch (error) {
    console.error("‚ùå Erro ao enviar mensagem:", error.message || error);
    throw error;
  }
};

// Envia mensagem para o n√∫mero do administrador
const sendAdm = async (message) => {
  await sendBailey(11992767398, message);
};

// Exporta as fun√ß√µes
module.exports = {
  connect,
  sendBailey,
  sendAdm,
};
