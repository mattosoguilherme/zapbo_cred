const { Boom } = require("@hapi/boom"); // Utilizada para erros mais estruturados (n√£o est√° sendo usada diretamente aqui)
const {
  DisconnectReason,
  useMultiFileAuthState,
  makeWASocket,
  Browsers,
} = require("@whiskeysockets/baileys"); // Baileys √© a biblioteca que implementa o WhatsApp Web API

// Declara√ß√£o de vari√°veis globais
let sock = null; // Vari√°vel para armazenar a inst√¢ncia do socket do WhatsApp
let state = null; // Vari√°vel para armazenar o estado de autentica√ß√£o
let saveCreds = null; // Fun√ß√£o para salvar as credenciais de autentica√ß√£o
let isConnected = false; // Flag para indicar se a conex√£o com o WhatsApp foi estabelecida

// Fun√ß√£o ass√≠ncrona para conectar ao WhatsApp
const connect = async () => {
  // Obt√©m o estado de autentica√ß√£o, que pode ser salvo em m√∫ltiplos arquivos
  const authState = await useMultiFileAuthState("auth_info_baileys");
  state = authState.state; 
  saveCreds = authState.saveCreds; 

  // Cria√ß√£o da inst√¢ncia do socket para comunica√ß√£o com o WhatsApp
  sock = makeWASocket({
    auth: state, 
    printQRInTerminal: true, // Exibe o QR Code no terminal para escanear
    browser: Browsers.windows("Desktop"), // Define o nome do browser (usado para conectar)
  });

  // Evento que captura as mensagens de WhatsApp
  sock.ev.on("messages.upsert", async ({ messages }) => {
    for (const msg of messages) {
      if (msg.key.remoteJid === "status@broadcast") {
        // Ignora as mensagens de status do WhatsApp (broadcasts)
        console.log("üì¢ Ignorando mensagem de Status...");
        return; 
      }
    }
  });

  // Evento que lida com atualiza√ß√µes de conex√£o
  sock.ev.on("connection.update", async (update) => {
    const { connection, lastDisconnect } = update;

    if (connection === "close") {
      const errorCode = lastDisconnect?.error?.output?.statusCode; // Captura o c√≥digo de erro da desconex√£o
      console.log(`‚ö†Ô∏è Conex√£o fechada. C√≥digo: ${errorCode}`);

      if (errorCode === DisconnectReason.loggedOut) {
        console.log("üö® Usu√°rio deslogado. Escaneie o QR Code novamente.");
        isConnected = false;
        return;
      }

      console.log("üîÑ Tentando reconectar...");
      isConnected = false; 
      setTimeout(connect, 5000); 
    } else if (connection === "open") {
 
      console.log("‚úÖ Conex√£o estabelecida!");
      console.log('N√∫mero logado:', sock.user.id.split(':')[0]); 
      isConnected = true; 
    }
  });

  // Atualiza as credenciais de autentica√ß√£o quando h√° altera√ß√µes
  sock.ev.on("creds.update", saveCreds);
};

// Fun√ß√£o ass√≠ncrona para aguardar a conex√£o ser estabelecida
const waitForConnection = async () => {
  let attempts = 0; // Contador de tentativas
  while (!isConnected) {
    if (attempts >= 15) throw new Error("‚è≥ Tempo limite atingido para conex√£o!"); // Se n√£o conectar em 15 tentativas, lan√ßa erro
    console.log("‚è≥ Aguardando conex√£o...");
    await new Promise((resolve) => setTimeout(resolve, 2000)); // Aguarda 2 segundos antes de tentar novamente
    attempts++; // Incrementa o contador de tentativas
  }
};

// Fun√ß√£o ass√≠ncrona para enviar mensagens para um n√∫mero espec√≠fico
const sendBailey = async (number, message) => {
  if (!sock) throw new Error("üö´ Socket n√£o inicializado."); 
  await waitForConnection(); // Aguarda a conex√£o ser estabelecida antes de enviar

  try {
    console.log(`üì§ Enviando mensagem para ${number}...`);
    // Envia a mensagem usando o socket
    await sock.sendMessage(`${number}@s.whatsapp.net`, { text: message });
    console.log(`‚úÖ Mensagem enviada para ${number}`);
  } catch (error) {
    console.error("‚ùå Erro ao enviar mensagem:", error.message || error); // Trata erros ao enviar mensagem
    throw error; // Relan√ßa o erro
  }
};

// Fun√ß√£o para enviar uma mensagem espec√≠fica para o administrador
const sendAdm = async (message) => {
  
  await sendBailey(sock.user.id.split(':')[0], message);
};

// Exporta as fun√ß√µes para uso externo
module.exports = {
  connect, 
  sendBailey, 
  sendAdm, 
};
